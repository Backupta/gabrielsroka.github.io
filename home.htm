<!doctype html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>My Apps</title>
<link href="https://ok1static.oktacdn.com/assets/css/enduser/enduser.css" type="text/css" rel="stylesheet" />
<style>
nav, #weather, #stocks, #oktaStatus {
    margin: 16px 32px;
}
.app-button-wrapper {
    width: 64px;
    margin-left: 32px;
    margin-bottom: 20px;
}
.app-button .logo {
    visibility: visible;
}
.app-button-name {
    width: 100%;
}
a:active, a:link, a:visited {
    color: black;
}
#stocks td {
    width: 30%;
    height: 22px;
}
</style>
</head>
<body>
<nav>
<a href="/">Gabriel Sroka</a> - 
<a href="https://gsroka-neto.oktapreview.com">Home</a>
<span style='float: right;'><a id="refresh">Refresh</a> - 
<a href="/login.htm?signout">Sign out</a></span>
</nav>
<main>
<div id="weather" style="height: 80px;"></div>
<br>
<div id="stocks">
<table>
<tr><td><a href="https://www.google.com/search?q=okta+stock">OKTA</a><td>123.45
<td><a href="https://www.google.com/search?q=aapl+stock">APPL</a><td>123.45
<tr><td><a href="https://www.google.com/search?q=goog+stock">GOOG</a><td>123.45
<td><a href="https://www.google.com/search?q=msft+stock">MSFT</a><td>123.45
</table>
</div>
<br>
<div id="oktaStatus"></div>
<br>
<div id="icons"></div>
</main>
<script>
// For this to work, enable CORS in Okta: Security > API > Trusted Origins > Add Origin > CORS.
const baseUrl = "https://gsroka-neto.oktapreview.com";

refresh.onclick = getLinks;

getWeather();
getStatus();

if (localStorage.links) {
    var links = JSON.parse(localStorage.links);
    showLinks(links);
} else {
    getLinks();
}

// It's expecting appLinks whose labels match the following pattern:
//     label[, url]
// eg: "NY Times, nytimes.com", or just "NY Times"
// If url is blank, it will figure it out from the label. It will remove spaces, and add "https://" and ".com", etc.
async function getLinks() {
    try {
        var init = {credentials: "include"};
        // var init = {mode: "cors"}; // This didn't seem to work.
        var response = await fetch(`${baseUrl}/api/v1/users/me/appLinks`, init);
        var links = await response.json();
        links = links
            .sort((link1, link2) => link1.sortOrder < link2.sortOrder ? -1 : 1)
            .map(link => {
                var [label, url] = link.label.split(/,/);
                if (url) {
                    url = url.trim();
                } else {
                    url = label.replace(/ /g, "");
                }
                if (!url.startsWith("https")) url = "https://" + url;
                if (!url.includes(".")) url += ".com";
                return {label, url};
            });
        localStorage.links = JSON.stringify(links);
        showLinks(links);
    } catch (e) {
        location.href = "/login.htm";
    }
}

function showLinks(links) {
    var lis = "";
    links.forEach(link => {
        lis += `<li class='app-button-wrapper'>` +
            `<a href='${link.url}' target='_blank' class='app-button' rel='noopener'>` +
            `<img src='${new URL(link.url).origin}/favicon.ico' class='logo'/></a>` +
            `<p class='app-button-name'>${link.label}`;
    });
    icons.innerHTML = `<ul>${lis}</ul>`;
}

function getWeather() {
    getForecast()
    .then(forecast => {
        weather.innerHTML = "<a href='https://www.google.com/search?q=weather'>" + 
            "<div>" + forecast.daily[0].temperature + "° ↑ &nbsp; • &nbsp; " + forecast.daily[1].temperature + "° ↓" +
            `<div><span style='font-size: 64px;'>${forecast.hourly.temperature}°</span>` +
            `<span style='float: right;'><img src='${forecast.hourly.icon}'><br>${forecast.hourly.shortForecast}</span></div></div></a>`;
    });
}

async function getForecast() {
    const latlong = "33.7737,-118.1365";
    var response = await fetch("https://api.weather.gov/points/" + latlong);
    const point = await response.json();

    response = await fetch(point.properties.forecast);
    const forecast = await response.json();

    response = await fetch(point.properties.forecastHourly);
    const forecastHourly = await response.json();

    return {daily: forecast.properties.periods, hourly: forecastHourly.properties.periods[0]};
}

function getStatus() {
    fetch("https://api.rss2json.com/v1/api.json?rss_url=https%3A%2F%2Ffeeds.feedburner.com%2FOktaTrustRSS")
    .then(response => response.json())
    .then(feed => {
        const s = feed.items[0];
        oktaStatus.innerHTML = `<div><a href='https://status.okta.com/'>STATUS</a></div><a href='${s.link}'>${s.title}</a><span style='float: right;'>${s.pubDate}</span>`;
    })
}
</script>
</body>
</html>
