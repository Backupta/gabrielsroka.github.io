<!doctype html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>My Apps</title>
<link href="https://ok1static.oktacdn.com/assets/css/enduser/enduser.css" type="text/css" rel="stylesheet" />
<style>
nav, .widget {
    margin: 32px;
}
a:active, a:link, a:visited, span {
    color: black;
}
#notifications {
    display: none;
}
#stocks td {
    width: 33%;
    height: 22px;
}
.app-button-wrapper {
    width: 64px;
    margin-left: 32px;
    margin-bottom: 20px;
}
.app-button .logo {
    visibility: visible;
}
.app-button-name {
    width: 100%;
}
</style>
</head>
<body>
<nav>
<a href='/'>Gabriel Sroka</a> - 
<a href='https://gsroka-neto.oktapreview.com'>Home</a>
<span style='float: right;'>
<span id=notificationMenu>ðŸ””</span> - 
<span id=refresh>Refresh</span> - 
<a href='/login.htm?signout'>Sign out</a> 
</span>
</nav>
<main>
<div id=notifications class=widget>
<div id=oktaStatus>
<div><a href='https://status.okta.com' style='font-weight: bold;'>Okta Status</a></div>
</div>
</div>
<div id=weather style='height: 80px;' class=widget>Loading <a href='https://www.google.com/search?q=weather'>weather</a>...</div>
<div id=stocks class=widget>
<table>
<tr><td><a href='https://www.google.com/search?q=okta stock'>Okta</a><td>123.45
<td><a href='https://www.google.com/search?q=aapl stock'>Apple</a><td>123.45
<tr><td><a href='https://www.google.com/search?q=goog stock'>Google</a><td>123.45
<td><a href='https://www.google.com/search?q=msft stock'>Microsoft</a><td>123.45
</table>
</div>
<div id=apps></div>
</main>
<script>
// For this to work, enable CORS in Okta: Security > API > Trusted Origins > Add Origin > CORS.
const baseUrl = "https://gsroka-neto.oktapreview.com";

refresh.onclick = getLinks;
if (localStorage.links) {
    showLinks(JSON.parse(localStorage.links));
} else {
    getLinks();
}

getWeather();

notifications.toggle = function () {this.isVisible() ? this.hide() : this.show()};
notifications.isVisible = function () {return this.style.display == 'block'};
notifications.show = function () {this.style.display = 'block'};
notifications.hide = function () {this.style.display = 'none'};
notificationMenu.onclick = () => notifications.toggle();
getNotifications();

// It's expecting appLinks whose labels match the following pattern:
//     label[, url]
// eg: "NY Times, nytimes.com", or just "NY Times"
// If url is blank, it will figure it out from the label. It will remove spaces, and add "https://" and ".com", etc.
async function getLinks() {
    try {
        const init = {credentials: "include"};
        // const init = {mode: "cors"}; // This didn't seem to work.
        const response = await fetch(`${baseUrl}/api/v1/users/me/appLinks`, init);
        const links = (await response.json())
            .sort((link1, link2) => link1.sortOrder < link2.sortOrder ? -1 : 1)
            .map(link => {
                var [label, url] = link.label.split(/,/);
                if (url) {
                    url = url.trim();
                } else {
                    url = label.replace(/ /g, "");
                }
                if (!url.startsWith("https")) url = "https://" + url;
                if (!url.includes(".")) url += ".com";
                return {label, url};
            });
        localStorage.links = JSON.stringify(links);
        showLinks(links);
    } catch (e) {
        location.href = "/login.htm";
    }
}

function showLinks(links) {
    const lis = links.map(link => `<li class='app-button-wrapper'>` +
        `<a href='${link.url}' target='_blank' class='app-button' rel='noopener'>` +
        `<img src='${new URL(link.url).origin}/favicon.ico' class='logo'/></a>` +
        `<p class='app-button-name'>${link.label}`);
    apps.innerHTML = `<ul>${lis.join('')}</ul>`;
}

async function getWeather() {
    const forecast = await getForecast();
    const hi = Math.max(forecast.daily[0].temperature, forecast.daily[1].temperature);
    const lo = Math.min(forecast.daily[0].temperature, forecast.daily[1].temperature);
    weather.innerHTML = "<a href='https://www.google.com/search?q=weather'>" + 
        `${hi}Â° â†‘ &nbsp; â€¢ &nbsp; ${lo}Â° â†“` +
        `<span style='float: right;'>${forecast.hourly.shortForecast}</span>` +
        `<div><span style='font-size: 64px;'>${forecast.hourly.temperature}Â°</span>` +
        `<span style='float: right;'><img src='${forecast.hourly.icon}' style='margin-top: 4px;'></span></div></a>`;
}

async function getForecast() {
    const latlong = "33.7737,-118.1365";
    // const {coords} = await getPosition();
    // const latlong = coords.latitude + ',' + coords.longitude;

    var response = await fetch("https://api.weather.gov/points/" + latlong);
    const point = await response.json();

    response = await fetch(point.properties.forecast);
    const forecast = await response.json();

    response = await fetch(point.properties.forecastHourly);
    const forecastHourly = await response.json();

    return {daily: forecast.properties.periods, hourly: forecastHourly.properties.periods[0]};
}

// function getPosition() {
//   return new Promise(resolve => navigator.geolocation.getCurrentPosition(resolve));
// }

async function getNotifications() {
    const response = await fetch("https://api.rss2json.com/v1/api.json?rss_url=https://feeds.feedburner.com/OktaTrustRSS&api_key=bktpucfcehpay70oarqhspsrzyt9wbjebfvhqkwb&count=1");
    const feed = await response.json();
    const item = feed.items[0];
    const guid = item.guid.split('/').pop();
    const seenNotifications = JSON.parse(localStorage.notifications || "[]");
    const date = new Date(item.pubDate + "Z");
    const dateStr = (date.getMonth() + 1) + "/" + date.getDate() + " " + date.getHours() + ":" + twoDigits(date.getMinutes());
    oktaStatus.innerHTML += `<a href='${item.link}'>${item.title}</a><span id=seen style='float: right;'>${dateStr}</span>`;
    if (seenNotifications.includes(guid)) {
        seen.innerHTML += "âœ“";
    } else {
        seen.onclick = () => {
            seen.innerHTML += "âœ“";
            seen.onclick = null;
            notifications.hide();
            seenNotifications.push(guid);
            localStorage.notifications = JSON.stringify(seenNotifications);
        };
        notifications.show();
    }
}

const twoDigits = n => n < 10 ? "0" + n : n;
</script>
</body>
</html>
