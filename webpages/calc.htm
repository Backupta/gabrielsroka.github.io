<!doctype html>
<html>
<head>
<title>Calc</title>
<style>
body {
    font-family: Arial, sans-serif;
    font-size: 10pt;
}
th {
    font-weight: normal;
    background-color: #a0caff;
    padding-left: 3px;
    padding-right: 3px;
}
</style>
</head>
<body>
<table id="calc"></table>
<script src="scripts/js.js" type="text/javascript"></script>
<script type="text/javascript">
/*

try:

#a1:=Rate=4.375;a2:=Years=30;a3:=NPer=Years*12;a4:=PV=710000*0.80;a5:=Pmt=Math.pmt(Rate/12/100,NPer,PV);rows:5;cols:1

#a1:=Rate=4.375;a2:=Years=30;a3:=NPer=Years*12;a4:=PV=561800;a5:=Pmt=Math.round(Math.pmt(Rate/12/100,NPer,PV)*100+1)/100;c1:|new Date(2010,11+this.r-2,1);d1:|Balance=iif(this.r==1,PV,d[this.r-1]-f[this.r-1]);e1:|Interest=Balance[this.r]*Rate/12/100;f1:|Principal=Pmt-Interest[this.r];a7:=TotalPrin=sum(Principal);rows:360;cols:6

*/

// TODO: Name a column, eg, bal, so each row in the column becomes bal[1], bal[2], etc.
// TODO: Allow a cell to become a name for itself.
// TODO: Enter a formula at the top of the col and it will apply to all its rows.
// TODO: Add share via email link.

function iif(a, b, c) {
    return a ? b : c;
}

function sum(a) {
    var t = 0;
    for (var i in a) t += a[i];
    return t;
}

onload = function () {
    var rows = 10, cols = 5, row, col;
    var places = 2;
    var delim = ";", assign = ":", args, input;
    function encodedHash() {return location.href.split("#")[1];}
    function colLetter(col) {
        if (col > 26) {
            return "a" + String.fromCharCode("a".charCodeAt(0) + col - 26 - 1);
        } else {
            return String.fromCharCode("a".charCodeAt(0) + col - 1);
        }
    }
    
    if (location.hash) {
        args = encodedHash().parseQueryString(delim, assign);
        rows = args.rows || rows;
        cols = args.cols || cols;
        delete args.rows;
        delete args.cols;
    }
    
    var table = document.getElementById("calc");
    table.appendChild(document.createElement("tbody"));
    var tr = table.createTHead().insertRow(-1);
    tr.appendChild(document.createElement("th")).innerHTML = "&nbsp;";
    for (col = 1; col <= cols; col++) {
        tr.appendChild(document.createElement("th")).innerHTML = colLetter(col);
    }
    
    for (row = 1; row <= rows; row++) {
        tr = table.tBodies[0].insertRow(-1);
        tr.appendChild(document.createElement("th")).innerHTML = row;
        for (col = 1; col <= cols; col++) {
            input = tr.insertCell(-1).appendChild(document.createElement("input"));
            input.c = colLetter(col);
            input.r = row;
            input.id = input.c + input.r;
            window[input.c] = [];
            input.onfocus = function () {
                if (this.formula) this.value = "=" + this.formula;
                if (this.pipe) this.value = "|" + this.formula;
                this.style.textAlign = "left";
            };
            input.onblur = function (event, setHash) {
                function formulate(pipe) {
                    this.formula = value.substr(1);
                    fValue = eValue = eval(this.formula);
                    if (typeof eValue == "number") {
                        fValue = parseFloat(eValue.toFixed(places));
                    } else if (eValue.toDateString) {
                        fValue = eValue.toDateString();
                    }
                    if (this.formula.contains("=")) {
                        var n = this.formula.split("=")[0];
                        if (pipe) {
							window[n] = window[this.c];
						}
                        this.value = n + "=" + fValue;
                    } else {
                        this.value = fValue;
                    }
                }
                var value = this.value; // Original version.
                var eValue; // May be a Number, whereas value is always a String.
                var fValue; // Formatted version.
                if (value.startsWith("=")) {
                    formulate.call(this, false);
                } else if (value.startsWith("|")) {
                    formulate.call(this, true);
                    this.pipe = true;
                    for (var row = this.r + 1; row <= rows; row++) {
                        var input = document.getElementById(this.c + row);
                        if (!input.value) {
                            var pValue = eval(value.substr(1).replace(/=/, "[" + row + "]=").replace(/this\.r/g, row));
                            if (isNaN(pValue)) break;
                            if (typeof pValue == "number") {
                                pValue = parseFloat(pValue.toFixed(places));
                                input.style.textAlign = "right";
                            } else if (pValue.toDateString) {
                                pValue = pValue.toDateString();
                            }
                            input.value = pValue;
                            input.style.backgroundColor = "#e0e0ff";
                            input.style.color = "black";
                            input.disabled = true;
                            window[this.c][row] = pValue;
                        }
                    }
                } else {
                    this.formula = "";
                    eValue = isNaN(value) ? value : eval(value);
                }
                // Create global variables for other formulas to use.
                window[this.c][this.r] = window[this.id] = eValue;
                this.style.textAlign = isNaN(eValue) ? "left" : "right";
                if (event || setHash) {
                    args = ((location.hash ? encodedHash() + delim : "") + this.id + assign + value).parseQueryString(delim, assign);
                    var hash = [];
                    for (var id in args) {
                        if (args[id]) hash.push(id + assign + args[id]);
                    }
                    location.hash = hash.join(delim);
                }
            };
        }
    }
    
    if (args) {
        for (var i = 1; i <= rows; i++) { // This outer loop is a hack to make dependent/recursive formulas work.
            for (var id in args) {
                input = document.getElementById(id);
                input.value = decodeURIComponent(args[id]);
                input.onblur(null, false);
            }
        }
    } else {
        document.getElementById("a1").focus();
    }
};
</script>
</body>
</html>
