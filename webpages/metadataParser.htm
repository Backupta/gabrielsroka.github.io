<!doctype html>
<html>
<head>
<meta name="viewport" content="initial-scale=1.0">
<title>Metadata Parser</title>
<script type="text/javascript" src="scripts/campuses.js"></script>
<script type="text/javascript" src="scripts/table.js"></script>
<script type="text/javascript" src="scripts/Request.js"></script>
<script type="text/javascript" src="scripts/js.js"></script>
<link rel="stylesheet" type="text/css" href="table.css">
<style type="text/css">
 body {font-family: Arial, sans-serif; font-size: 10pt;}
 .IdP {background-color: #D8FFD8;} /* light green */
 .SP  {background-color: #FFD8D8;} /* light red */
 a {text-decoration: none;}
 a:hover {text-decoration: underline;}
 img {border-style: none;}
</style>
</head>
<body>
<form onsubmit="return loadMetadata();">
<label>Metadata <u>U</u>RL: <input id="urlInput" type="text" accesskey="U" size="70"></label>&nbsp;
<label>CSU Only<input id="csuOnly" type="checkbox" checked="checked"></label>
<label>IdPs Only<input id="idpOnly" type="checkbox" checked="checked"></label>
<input type="submit" value="Load">
</form>
<div id="results"></div>
<script type="text/javascript">
/// <reference path="scripts/campuses.js" />
/// <reference path="scripts/table.js" />
/// <reference path="scripts/Request.js" />
/// <reference path="scripts/js.js" />

onload = function () {
    var urlInput = document.getElementById("urlInput");
    // What's a good way to tell IE to use wayf.incommonfederation.org and other browsers to use wayf.calstate.edu ?
    // (based on whether XMLHttpRequest supports cross-domain requests)
    // TODO: try to download from one, and if it fails, download from the other.
    if (window.clipboardData) { // hacky kludge of death
        urlInput.value = location.protocol + "//wayf.incommonfederation.org/InCommon/InCommon-metadata.xml";
    } else {
        urlInput.value = location.protocol + "//wayf.calstate.edu/metadata/InCommon-metadata.xml";
    }
    urlInput.select();
//    document.getElementById("results").innerHTML = "Last modified: " + document.lastModified;
};

function loadMetadata() {
    function metadataResponseLoaded(metadata) {
        // Can be called by anArray.sort(entityComparer)
        function entityComparer(entity1, entity2, asc) {
            if (entity1.type == entity2.type) {
                return comparer(entity1.reverseDomainName, entity2.reverseDomainName, asc);
            } else if (entity1.type == "IdP") {
                return -1;
            }
            return 1;
        }
        function getElementValue(x, tagName) {
            var el = x.getElementsByTagName(tagName)[0];
            if (el) el = el.firstChild;
            return el ? el.nodeValue : "";
        }

        if (typeof metadata == "string") { // Error string.
            results.innerHTML = metadata.replace(/\n/g, "<br>");
            return;
        }
        // var csuRegExp = /(calpoly|calstate|calstatela|csub|csuchico|csuci|csudh|csueastbay|csufresno|csulb|csum|csumb|csun|csupomona|csus|csusb|csusm|csustan|fullerton|humboldt|mlml\.calstate|sdsu|sfsu|sjsu|sonoma)\.edu/;
        // var ns = new Namespace("shibmd", "urn:mace:shibboleth:metadata:1.0");
        var csuOnly = document.getElementById("csuOnly").checked && /InCommon|CSUconnect/i.test(url);
        var idpOnly = document.getElementById("idpOnly").checked;
        var count = {type: {}, inCsu: {}};
        var eds = metadata.getElementsByTagName("EntityDescriptor"), csuIdps = 0, entities = [];
        for (var e = 0; e < eds.length; e++) {
            var entity = {id: eds[e].getAttribute("entityID"), oName: "", oUrl: ""};
            entity.inCsu = campuses.domainNameRegExp.test(entity.id); // regExp.test(string) returns boolean.
            if (csuOnly && !entity.inCsu) continue;

            var idp = eds[e].getElementsByTagName("IDPSSODescriptor");
            if (idp.length) {
                entity.type = "IdP"; // .type must match css class above
                if (entity.inCsu) csuIdps++;
                // entity.scope = ns.getElementValue(idp[0].getElementsByTagName("Extensions")[0], "Scope");
                var ssos = idp[0].getElementsByTagName("SingleSignOnService"), saml = {v1: false, v2: false};
                for (var s = 0; s < ssos.length; s++) {
                    var binding = ssos[s].getAttribute("Binding");
                    if (binding.contains("shibboleth:1.0")) {
                        saml.v1 = true;
                    } else if (binding.contains("SAML:2.0")) {
                        saml.v2 = true;
                    }
                }
                var idpServer = idp[0].getElementsByTagName("SingleSignOnService")[0].getAttribute("Location").split("/")[2];
                var statusUrl = "https://" + idpServer + (idpServer.contains("csum.edu") ? ":8443" : "") + "/idp/profile/Status";
                var throbber = "<img src='images/throbber.gif' width=16 height=16 />";
                var metadataUrl = "https://" + idpServer + "/idp/profile/Metadata/SAML";
                entity.idpServer = idpServer + "<br>" + 
                        "Status".link(statusUrl) + ": " +
                            (window.ActiveXObject ? 
                                ("<span id='status" + idpServer + "'>" + throbber + "</span>") : 
                                 "<span title='Auto-status is only supported in IE.'>?</span>") + " | " +
                        "Metadata".link(metadataUrl) + /* ": " +
                            (window.ActiveXObject ? 
                                ("<span id='metadata" + idpServer + "'>" + throbber + "</span>") : 
                                 "<span title='Auto-status is only supported in IE.'>?</span>") + */ " | " +
                        " <span" + (saml.v1 && saml.v2 ? "" : " style='background-color: red; color: white'") + ">SAML" +
                            (saml.v1 ? "1" : "") + (saml.v1 && saml.v2 ? "," : "") + (saml.v2 ? "2" : "") +
                            "</span>";
                if (window.ActiveXObject && location.protocol == "https:") { // Only IE supports fetching status from remote servers.
                    function statusResponseLoaded(response, idpServer) {
                        var status = document.getElementById("status" + idpServer);
                        status.innerHTML = response;
                        status.title = (new Date()).toDateTimeString();
                        if (response != "ok") status.style.backgroundColor = "red";
                    }
                    var statusRequest = new Request(statusUrl, null, statusResponseLoaded);
                    statusRequest.getText(idpServer);
                    /* // Parsing the metadata works, but it's slow and rarely useful.
                    function idpMetadataResponseLoaded(response, idpServer) {
                        var metadata = document.getElementById("metadata" + idpServer);
                        var searchString = 'entityID="';
                        var pos = response.indexOf(searchString);
                        if (pos != -1) {
                            pos += searchString.length;
                            var entityID = response.substring(pos, response.indexOf('"', pos));
                            metadata.innerHTML = entityID;
                        }
                        metadata.title = (new Date()).toDateTimeString();
                    }
                    var idpMetadataRequest = new Request(metadataUrl, null, idpMetadataResponseLoaded);
                    idpMetadataRequest.getText(idpServer);
                    */
                }
            } else { // "SPSSODescriptor"
                entity.type = "SP";
                entity.idpServer = "-";
                // entity.scope = "-";
            }
            var o = eds[e].getElementsByTagName("Organization")[0], domainName;
            if (o) {
                entity.oName = getElementValue(o, "OrganizationName");
                // oDisplayName is rather verbose and seldom useful.
//                var oDisplayName = getElementValue(o, "OrganizationDisplayName");
//                if (oDisplayName && oDisplayName != entity.oName) entity.oName += " (" + oDisplayName + ")";
                entity.oUrl = getElementValue(o, "OrganizationURL");
                if (!entity.oUrl.startsWith("http")) entity.oUrl = "http://" + entity.oUrl;
            }
            if (entity.id.startsWith("http:") || entity.id.startsWith("https:")) {
                domainName = entity.id.split("/")[2].split(":")[0]; // URL
            } else {
                domainName = entity.id.split(":").pop(); // URN, e.g. "urn:mace:incommon:calstate.edu"
            }
            entity.reverseDomainName = domainName.split(".").reverse().join(".").toLowerCase();
            if (csuOnly) {
                var contacts = eds[e].getElementsByTagName("ContactPerson");
                if (contacts) {
                    entity.contacts = [];
                    for (var c = 0; c < contacts.length; c++) {
                        var contact = contacts[c], givenName = getElementValue(contact, "GivenName"), sn = getElementValue(contact, "SurName"),
                        	mail = getElementValue(contact, "EmailAddress");
                        entity.contacts.push(givenName + (sn ? " " + sn : "") + " " + mail.link("mailto:" + mail));
                    }
                    entity.contacts = entity.contacts.join("<br>");
                }
            }
            
            if ((idpOnly && entity.type == "IdP") || !idpOnly) {
                entities.push(entity);
            }

            for (var p in count) {
                var v = entity[p];
                if (count[p][v]) {
                    count[p][v]++;
                } else {
                    count[p][v] = 1;
                }
            }
        }
        
        entities.addRows = function (table) {
            for (var e = 0; e < this.length; e++) {
                var entity = this[e];
                entity.rowId = "r" + e; // Add short, unique id.
                var r = table.tBodies[0].insertRow(-1);
                r.id = entity.rowId;
                r.insertCell(-1).innerHTML = entity.oUrl ? entity.oName.link(entity.oUrl) : entity.oName;
                if (!idpOnly) {
                    r.className = entity.type;
                    r.insertCell(-1).innerHTML = entity.type;
                }
                var id = entity.id;
                if (id.startsWith("http:") || id.startsWith("https:")) {
                    id = id.link(id);
                }
                r.insertCell(-1).innerHTML = id;
                r.insertCell(-1).innerHTML = entity.idpServer;
                // r.insertCell(-1).innerHTML = entity.scope;
                r.insertCell(-1).innerHTML = csuOnly ? entity.contacts : entity.inCsu;
            }
        };
        var headers = [new Header("Organization Name", "oName")];
        if (!idpOnly) {
            var typeHeader = new Header("Type", "type");
            headers.push(typeHeader);
        }
        headers.push(new Header("Entity ID", "id", entityComparer));
        headers.push(new Header("IdP Server / Status / SSO SAML v.", "idpServer"));
        // headers.push(new Header("Scope", "scope"));
        if (csuOnly) {
            headers.push(new Header("Contact(s)", "contacts"));
        } else {
            var inCsuHeader = new Header("CSU", "inCsu");
            headers.push(inCsuHeader);
        }
        headers.sortable = true;
        function pluralize(i, s) {return i + " <span class=" + s + ">" + s + "</span>" + (i == 1 ? "" : "s");}
        results.innerHTML = "Metadata".link(url) + " contains " + 
                            (csuOnly ? "" : pluralize(count.type.IdP, "IdP") + " and " + pluralize(count.type.SP, "SP") + ". ") + 
                            csuIdps + " CSU IdPs (including CO & MLML). " + 
                            "Last Modified: " + metadataRequest.lastModifiedDate.toDateTimeString() + "<br><br>";
        var table = createTable(headers, entities);
        results.appendChild(table);
        if (!idpOnly) document.getElementById(typeHeader.id).title = count.type.IdP + " IdPs, " + count.type.SP + " SPs";
        if (!csuOnly) document.getElementById(inCsuHeader.id).title = count.inCsu["true"] + " true, " + count.inCsu["false"] + " false";
    }
    
    var url = document.getElementById("urlInput").value;
    // Local URL, cached copy (works in FF and IE, but is cached).
    // url = "InCommon-metadata.xml";

    // Remote URLs work only in IE with "Access data sources across domains" Enabled in Custom Level/Miscellaneous.
    // from http://msdn.microsoft.com/en-us/library/ms537505%28VS.85%29.aspx#xdomain
    // "the XMLHTTP request can only specify URLs with the same port and protocol method as that from which the page is served"
    
    // url = "https://wayf.incommonfederation.org/InCommon/InCommon-metadata.xml";           // InCommon
    // url = "http://metadata.aai.switch.ch/metadata.switchaai.xml";                         // SWITCH Federation Shib 2.1
    // url = "https://www.switch.ch/aai/federation/SWITCHaai/metadata.switchaai_signed.xml"; // SWITCH Federation Shib 1.3/2.0
    // url = "http://metadata.ukfederation.org.uk/ukfederation-metadata.xml";                // UK AMF


    var results = document.getElementById("results");
    results.innerHTML = "<br><div align=center><img src=images/throbber.gif /></div>";
    
    var metadataRequest = new Request(url, null, metadataResponseLoaded);
    try {
        metadataRequest.get();
    } catch (e) {
        results.innerHTML = "Error message: " + e.message + ", number: " + e.number;
    }
    return false; // Cancel the form.submit()
}
</script>
</body>
</html>
